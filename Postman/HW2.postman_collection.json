{
	"info": {
		"_postman_id": "c56d76cf-5de9-4cee-9d02-3dfd38e02f72",
		"name": "HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19279186"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"//7. Спарсить request.\r",
							"var respData = pm.response.json();\r",
							"var reqData = request.data\r",
							"var salary_1_5 = respData.family.u_salary_1_5_year\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Test resp name\", function () {\r",
							"    pm.expect(respData.name).to.eql(\"Elena\");\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Test resp age\", function () {\r",
							"    pm.expect(respData.age).to.eql(\"32\");\r",
							"});\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Test resp salary\", function () {\r",
							"    pm.expect(respData.salary).to.eql(4000);\r",
							"});\r",
							"\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Test req name\", function () {\r",
							"    pm.expect(respData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Test resp age\", function () {\r",
							"    pm.expect(respData.age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"//console.log(\"reqData.salary is \" + typeof(reqData.salary))\r",
							"//console.log(\"respData.salary is \" + typeof(respData.salary))\r",
							"pm.test(\"Test resp salary\", function () {\r",
							"    pm.expect(+reqData.salary).to.eql(respData.salary);\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"//console.log(respData)\r",
							"console.log(respData.family)\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Test 1,5 year salary\", function () {\r",
							"    pm.expect(salary_1_5).to.eql(reqData.salary*4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Elena",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "4000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3/",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" //2. Статус код 200\r",
							" pm.test(\"Status code is 200\", function () {\r",
							"     pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Спарсить request.\r",
							"var respData = pm.response.json();\r",
							"var reqData = pm.request.url.query.toObject()\r",
							"var dog = respData.family.pets.dog;\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Test name\", function () {\r",
							"    pm.expect(respData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Test age\", function () {\r",
							"    pm.expect(respData.age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"// console.log(\"respData.salary is \" + typeof(respData.salary));\r",
							"// console.log(\"reqData.salary is \" + typeof(reqData.salary));\r",
							"pm.test(\"Test salary\", function () {\r",
							"    pm.expect(respData.salary).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(\"respData.family = \",respData.family);\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test (\"Dog has a name\", function () {\r",
							"    pm.expect(dog).to.have.property(\"name\")\r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test (\"Dog has an age\", function () {\r",
							"    pm.expect(dog).to.have.property(\"age\")\r",
							"});\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Test dog name\", function () {\r",
							"    pm.expect(dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Test dog age\", function () {\r",
							"    pm.expect(dog.age).to.eql(4);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Elena&age=32&salary=4000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Elena"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "4000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"//4. Спарсить request.\r",
							"var respData = pm.response.json();\r",
							"var reqData = pm.request.url.query.toObject ();\r",
							"var respSalary = respData.salary\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Test name\", function () {\r",
							"        pm.expect(respData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Test age\", function () {\r",
							"        pm.expect(respData.age).to.eql(+reqData.age);\r",
							"});\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"reqData.salary = \" + reqData.salary)\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(respSalary);\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"respSalary 0 =\",respSalary[0]);\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary из response.\r",
							"console.log(\"respSalary 1 =\",respSalary[1]);\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary из response.\r",
							"console.log(\"respSalary 2 =\",respSalary[2]);\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"//console.log(\"reqSalary =\" + typeof(reqData.salary));\r",
							"pm.test (\"Resp salary 0 = req salary\", function() {\r",
							"    pm.expect(respSalary[0]).to.eql(+reqData.salary)\r",
							"});\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test (\"Resp salary 1 = req salary * 2\", function() {\r",
							"    pm.expect(+respSalary[1]).to.eql(reqData.salary*2)\r",
							"});\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test (\"Resp salary 2 = req salary * 3\", function() {\r",
							"    pm.expect(+respSalary[2]).to.eql(reqData.salary*3)\r",
							"});\r",
							"\r",
							"//15. Создать в окружении переменную name\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Elena\");\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", 32);\r",
							"\r",
							"//17. Создать в окружении переменную salary\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", 4000);\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"respSalary.forEach(element=>\r",
							"console.log (element));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Elena&age=32&salary=4000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Elena"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "4000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"// 7. Спарсить request.\r",
							"var respData = pm.response.json ();\r",
							"var reqData = request.data;\r",
							"var reqSalary = reqData.salary;\r",
							"var person = respData.person;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json response has start_qa_salary\", function () {\r",
							"    pm.expect(respData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json response has qa_salary_after_6_months\", function () {\r",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json response has qa_salary_after_12_months\", function () {\r",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json response has qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json response has qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"json response has person\", function () {\r",
							"    pm.expect(respData).to.have.property(\"person\");\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test (\"start_qa_salary = request salary\", function () {\r",
							"    pm.expect(respData.start_qa_salary).to.eql(+reqSalary)\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test (\"qa_salary_after_6_months = request salary*2\", function () {\r",
							"    pm.expect(respData.qa_salary_after_6_months).to.eql(reqSalary*2)\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test (\"qa_salary_after_12_months = request salary*2.7\", function() {\r",
							"    pm.expect(respData.qa_salary_after_12_months).to.eql(reqSalary*2.7)\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test (\"qa_salary_after_1.5_year = request salary*3.3\", function() {\r",
							"    pm.expect(respData['qa_salary_after_1.5_year']).to.eql(reqSalary*3.3)\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test (\"qa_salary_after_3.5_years = request salary*3.8\", function() {\r",
							"    pm.expect(respData['qa_salary_after_3.5_years']).to.eql(reqSalary*3.8)\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test (\"1st element u_mane = request salary\", function() {\r",
							"    pm.expect(person.u_name[1]).to.eql(+reqSalary)\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test (\"u_age = request age\", function() {\r",
							"    pm.expect(person.u_age).to.eql(+reqData.age)\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test (\"u_salary_5_years = request salary*4.2\", function() {\r",
							"    pm.expect(person.u_salary_5_years).to.eql(reqData.salary*4.2)\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}